// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BillingType {
  Monthly
  Yearly
}

enum SubscriptionStatus {
  Active
  Inactive
  Cancelled
  Expired
}

enum ThemeMode {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  EN
  HI
  FR
  ES
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?
  role          Role      @default(USER)   // simplified role
  emailVerified DateTime?
  language      Language? @default(EN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  blogs         Blog[]
  uploads       Media[]
  accounts      Account[]
  sessions      Session[]
  subscription  UserSubscription[]
  passwordResetTokens PasswordResetToken[]
}

model Theme {
  id              String    @id @default(cuid())
  themeName       String    @unique
  primaryColor    String
  secondaryColor  String
  tertiaryColor   String
  font            String
  logoUrl         String?
  faviconUrl      String?
  backgroundColor String?
  textColor       String?
  mode            ThemeMode @default(LIGHT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model HeaderItem {
  id              String   @id @default(cuid())
  label           String
  href            String
  icon            String?
  subHeaderItems  SubHeaderItem[]
  position        Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SubHeaderItem {
  id              String   @id @default(cuid())
  label           String
  href            String
  headerItemId    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  headerItem      HeaderItem @relation(fields: [headerItemId], references: [id])
}

model SidebarGroup {
  id        String        @id @default(cuid())
  title     String
  position  Int
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  items      SidebarItem[]
  roleAccess SidebarGroupAccess[]
}

model SidebarItem {
  id             String        @id @default(cuid())
  label          String
  href           String
  icon           String?
  position       Int
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  sidebarGroupId String
  sidebarGroup   SidebarGroup  @relation(fields: [sidebarGroupId], references: [id], onDelete: Cascade)

  roleAccess SidebarItemAccess[]
}

model SidebarGroupAccess {
  role         Role
  sidebarGroupId String
  hasAccess    Boolean @default(true)
  sidebarGroup SidebarGroup @relation(fields: [sidebarGroupId], references: [id], onDelete: Cascade)

  @@id([role, sidebarGroupId])
  @@index([sidebarGroupId])
}

model SidebarItemAccess {
  role        Role
  sidebarItemId String
  hasAccess   Boolean @default(true)
  sidebarItem SidebarItem @relation(fields: [sidebarItemId], references: [id], onDelete: Cascade)

  @@id([role, sidebarItemId])
  @@index([sidebarItemId])
}

model CarouselItem {
  id              String   @id @default(cuid())
  title           String
  description     String
  imageUrl        String
  buttonLabel     String
  buttonHref      String
  position        Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FooterItem {
  id              String   @id @default(cuid())
  label           String
  href            String
  icon            String?
  position        Int
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SubscriptionPlan {
  id              Int                 @id @default(autoincrement())
  name            String
  tagline         String?
  pricing         Json                             
  badge           String?             
  features        Json  
  billing         BillingType         @default(Monthly)     
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  subscriptions UserSubscription[]
}

model UserSubscription {
  id           Int                @id @default(autoincrement())
  user         User               @relation(fields: [userId], references: [id])
  userId       String
  plan         SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId       Int
  status       SubscriptionStatus @default(Active)
  startsAt     DateTime
  endsAt       DateTime
  createdAt    DateTime           @default(now())

  @@index([userId, status]) 
}

model Pages {
  id          String   @id @default(cuid())
  name        String
  path        String   @unique
  slug        String
  displayName String
  isProtected Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roleAccess  RolePageAccess[]
}

model RolePageAccess {
  role        Role
  pageId      String
  hasAccess   Boolean  @default(true)
  page        Pages    @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@id([role, pageId]) // composite primary key
  @@index([pageId])
}

model Blog {
  id        Int   @id @default(autoincrement())
  banner    String
  title     String
  slug      String   @unique
  content   String   @db.LongText
  tags      Json
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model SiteConfig {
  id                String   @id @default(cuid())
  siteName          String
  domain            String
  supportEmail      String?
  whatsappNumber    String?
  googleAnalyticsId String?
  metaPixelId       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  url         String
  altText     String?
  type        String
  size        Int?
  createdAt   DateTime @default(now())
  uploadedBy  User?    @relation(fields: [uploadedById], references: [id])
  uploadedById String?
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
